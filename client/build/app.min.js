"user strict";

//["ui.bootstrap"]
 //hvaða url er hægt að nota í vafranum í þessu forriti, td /rooms
 //KANNSKI Á ÞETTA AÐ VERA --> ('chatApp', [require('angular-route')])

angular.module("chatApp", ["ngRoute"]).config(["$routeProvider",
	function($routeProvider){

	$routeProvider
	.when("/login", { 
		templateUrl: "src/login/login.html",
		controller: "LoginController"
	})
	.when("/roomlist/:user", { 
		templateUrl: "src/roomlist/roomlist.html",
		controller: "RoomlistController"
	})
	.when("/room/:user/:ID", { 
		templateUrl: "src/room/room.html",
		controller: "RoomController"
	})
	.otherwise({
		redirectTo: "/login"
	});
}])  
"use strict";

angular.module("chatApp").controller("LoginController", ["$scope", "socket", "$location", "$rootScope", "$routeParams",
	function ($scope, socket, $location, $rootScope, $routeParams) {
	// ChatResource  //BÆTA VIÐ $location Á MILLI
		//Angular fattar að þessi controller þarf eitthvað sem heitir chatResource
		//og býr til instance af því fyrir okkur og sendir það þarna inn
		//í staðinn fyrir að við gerum svona:  var resource = new ChatResource();
		//nú gerum við ráð fyrir að við erum með object sem heitri ChatReesource
		
		$scope.user = "";
		$scope.errorMessage = "";


		$scope.onLogin = function onLogin()
        {
            if($scope.user === "")
            {
                $scope.errorMessage = "You have to choose a name before you continue!";
            }
            else
            {
		        socket.emit("adduser", $scope.user, function(success, error)
                {
			        if (success)
                    {
                        $location.path("/roomlist/" + $scope.user);
                    } 
                    else 
                    {
                        $scope.errorMessage = "This username is already taken!";
                    }
                
		        });
            }

		};

	}]);
angular.module('chatApp').controller('RoomController', ["$scope", "socket", "$location", "$routeParams", 
	function ($scope, socket, $location, $routeParams) {

		$scope.message = ""
		$scope.roomName = $routeParams.roomID;
		$scope.messageHistory = [];

		socket.emit('joinroom', {'room': $scope.roomName});

		socket.on('updatechat', function(room, chatHistory){
			$scope.messageHistory = chatHistory;
		});

		$scope.sendmsg = function() {
 		    socket.emit('sendmsg',{roomName: $scope.roomName, msg:$scope.message});
 		    $scope.message = null; //hreinsa textabox
		};	
 }]);




/*angular.module("chatApp").controller("RoomController", 
	function RoomController($scope, $routeParams){
		//RoomController þarf að geta nálgast það hvaða id er í urlinu -> routeParams
		var id = $routeParams.id; 
		//svo í app.js --> .when("/rooms/:id", {..}) - :id og routeParams.id þarf að passa
	});



	{roomName: "the room identifier", msg: "The message itself, only the first 200 chars are considered valid" }
*/

angular.module('chatApp').controller('RoomlistController', ["$scope", "socket", "$location", "$routeParams", 
	function ($scope, socket, $location, $routeParams) {

      $scope.errorMessage = '';
      $scope.roomName = '';
      $scope.currentUser = $routeParams.user;
      $scope.roomlist = {};

      socket.emit("rooms");
      socket.on("roomlist", function(rooms) {
          $scope.roomlist = rooms;
      });
      
      socket.emit("users");
      socket.on('userlist', function(users) {
          $scope.activeUsers = users;
      });

      $scope.addRoom = function(){
          socket.emit("joinroom", {"room": $scope.roomName});
          //$scope.roomName = null;
      };

      $scope.moveToRoom = function(name){
          socket.emit("joinroom", {"room": name}, function (available) {
              if (available) {
                  $location.path("/room/" + $scope.currentUser + "/" + name);
              }
              else {
                  $scope.errorMessage = "Cannot join room";
              }
          });
      };
}]);

angular.module("chatApp").factory('socket', function ($rootScope) {
  var socket = io.connect("http://localhost:8080");
  return {
    on: function (eventName, callback) {
      socket.on(eventName, function () {  
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      });
    },
    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if (callback) {
            callback.apply(socket, args);
          }
        });
      })
    }
  };
});